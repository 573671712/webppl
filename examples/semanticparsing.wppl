


//////////////////
//The world is some number of objects with three random (binary) properties:
var makeObj = function(name) {
    return {name: name, blond: flip(0.5), nice: flip(0.5)}//, sweet: flip(0.3)}
}

var worldPrior = function(objs) {
//    var objs = objs?objs:[]
//    return flip(0.5) ? worldPrior(objs.concat([makeObj()])) : objs
    return [makeObj("Bob"), makeObj("Bill"), makeObj("Alice")]
}

//var uniformdraw = function(a) {
//    return a[randomInteger(a.length)]
//}

///////////////////////
//Semantic parser, ala sempre.
//Each step of the meaning function can combine one or more elements from the meaning fragments, resulting in a new meaning. Each step has a factor that can eg. throw out mis-typed meanings...
//first we get a lexical meaning for each word.
//then we recursively apply a random combiner, type [meaning]->[meaning], until only one meaning fragment is left.
//Every meaninf has world as first arg, so the final meaning should be type world->bool, and is applied to the world.

//lookup meaning.
//meaning is an object with semantics and syntax,
//syntax is
//the meaning mapping can be stochastic...
var lexical_meaning = function(word, world) {
    return (word=="blond")? {sem: function(obj){return obj.blond},
                           syn: ['L', 'NP', 'S']} :
    (word=="nice")? {sem: function(obj){return obj.nice},
        syn: ['L', 'NP', 'S']} :
    (word == "Bob")? {sem:find(world, function(obj){return obj.name=="Bob"}),
                      syn: 'NP'} :
    (word=="some")? {sem: function(P){return function(Q){return filter(filter(world, P), Q).length>0}},
                     syn: ['R', ['L', 'NP', 'S'], ['R', ['L', 'NP', 'S'], 'S']] } :
    (word=="all")? {sem: function(P){return function(Q){return filter(filter(world, P), neg(Q)).length==0}},
                    syn: ['R', ['L', 'NP', 'S'], ['R', ['L', 'NP', 'S'], 'S']] } :
    {sem: undefined, syn: ''} //any other words are assumed to be vacuous, they'll get deleted.
            //TODO other words...
}

var neg = function(Q){return function(x){return !Q(x)}}

var syntaxMatch = function(s,t) {
    return !(Array.isArray(s)) ? s==t :
    s.length==0? t.length==0 : (syntaxMatch(s[0], t[0]) & syntaxMatch(s.slice(1),t.slice(1)))
}

//randomly choose a word, try doing what it says, if it doesn't type return original.
//FIXME: would be more efficient to pre-screen for typing.
var combine_meaning = function(meanings) {
    var i = randomInteger(meanings.length)
    var s = meanings[i].syn
    if(Array.isArray(s)){ //a functor
       if(s[0] == 'L') {//try to apply left
            if(syntaxMatch(s[1],meanings[i-1].syn)){
                var f = meanings[i].sem
                var a = meanings[i-1].sem
                var newmeaning = {sem: f(a), syn: s[2]}
                return meanings.slice(0,i-1).concat([newmeaning]).concat(meanings.slice(i+1))
                }
        } else if(s[0] == 'R') {
            if(syntaxMatch(s[1],meanings[i+1].syn)){
                var f = meanings[i].sem
                var a = meanings[i+1].sem
                var newmeaning = {sem: f(a), syn: s[2]}
                return meanings.slice(0,i).concat([newmeaning]).concat(meanings.slice(i+2))
            }
        }
    }
    return meanings
}

var combine_meanings = function(meanings){
    return meanings.length==1 ? meanings[0].sem : combine_meanings(combine_meaning(meanings))
}

//split the string into words, lookup lexical meanings, delete words with vacuous meaning, then call combine_meanings..
var meaning = function(utterance, world) {
    return combine_meanings( filter(map(utterance.split(" "),
                                        function(w){return lexical_meaning(w, world)}),
                                    function(m){return !(m.sem==undefined)}))
}

////////////
//the literal listener simply infers likely worlds assuming the meaning is true in the world:
var literalListener = function(utterance) {
    Enumerate(function(){
              var world = worldPrior()
              var m = meaning(utterance, world)
              factor(m?0:-Infinity)
              return world
              }, 100)
}

//literalListener("Bob is nice")
//literalListener("some blond are nice")
literalListener("some blond people are nice")


//TODO:
//-soft factors to shape parses? learning?
//-lexical meanings: quantifiers, NPs, some polysemmy?, some indexicals?
//-inference: try enumeration, pf. implement beam search?



