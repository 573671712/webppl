// requires: rationalrules.js
// params: nFeatures, nExamples, tau, nClauses, clauseSize


// var nFeatures = 4;
// var tau = 0.5;
// var aObjects = [[0, 0, 0, 1], [0, 1, 0, 1], [0, 1, 0, 0], [1, 0, 0, 0]];
// var bObjects = [[0, 0, 1, 1], [1, 0, 0, 1], [1, 1, 1, 0], [1, 1, 1, 1]];

// var data = rr.genSynthData(nFeatures, nExamples, tau);
var data = rr.genSynthData(nFeatures, nExamples, nClauses, clauseSize);
var aObjects = data.a;
var bObjects = data.b;

var getFormula = function() {
	if (flip(tau)) {
		var c = conj();
		var f = getFormula();
		return function (x) { return c(x) || f(x); };
	} else
		return conj();
};

var conj = function() {
	if (flip(tau)) {
		var p = pred();
		var c = conj();
		return function (x) { return p(x) && c(x); };
	} else
		return pred();
};

var pred = function() {
	var index = randomInteger(nFeatures);
	var value = randomInteger(2);
	return function (x) { return x[index] === value };
};

var foreach = function(lst, fn) {
    var foreach_ = function(i) {
        if (i < lst.length) {
            fn(lst[i]);
            foreach_(i + 1);
        }
    };
    foreach_(0);
};

var conditionOn = function(objects, formula, targetval) {
	foreach(objects, function (x) {
		if (formula(x) !== targetval) factor(-10);
	});
};

var program = function() {
	var formula = getFormula();
	// console.log('1');
	conditionOn(aObjects, formula, true);
	// console.log('2');
	conditionOn(bObjects, formula, false);
	// console.log('3');
	return formula;
};