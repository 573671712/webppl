var flip = function(theta) {
  return sample(bernoulliERP, [theta]);
};

var randomInteger = function(n) {
  return sample(randomIntegerERP, [n]);
};

var discrete = function(n) {
  return sample(discreteERP, [n]);
};

var gaussian = function(mu, sigma){
  return sample(gaussianERP, [mu, sigma]);
};

var uniform = function(a, b){
  return sample(uniformERP, [a, b]);
};

var dirichlet = function(alpha){
  return sample(dirichletERP, alpha);
};

var poisson = function(mu, k){
  return sample(poissonERP, [mu, k]);
};

var binomial = function(p, n){
  return sample(binomialERP, [p, n]);
};

var beta = function(a, b){
  return sample(betaERP, [a, b]);
};

var exponential = function(a){
  return sample(exponentialERP, [a]);
};

var gamma = function(shape, scale){
  return sample(gammaERP, [shape, scale]);
};

var makeBetaBernoulli = function(pseudocounts) {
  globalStore.BBindex = 1 + (globalStore.BBindex==undefined ? 0 : globalStore.BBindex);
  var bbname = "BB"+globalStore.BBindex;
  globalStore[bbname] = pseudocounts;
  return function(){
    var pc = globalStore[bbname];  // get current sufficient stats
    var val = sample(bernoulliERP, [pc[0]/(pc[0]+pc[1])]);  // sample from predictive.
    globalStore[bbname] = [pc[0]+val, pc[1]+!val];  // update sufficient stats
    return val;
  };
};

var makeDirichletDiscrete = function(pseudocounts) {
  var addCount = function(a,i,j) {
    var j = j==undefined?0:j;
    if(a.length==0){
      return [];
    } else {
      return [a[0] + (i==j)].concat(addCount(a.slice(1),i,j+1));
    }
  };
  globalStore.DDindex = 1+ (globalStore.DDindex==undefined?0:globalStore.DDindex);
  var ddname = "DD"+globalStore.DDindex;
  globalStore[ddname] = pseudocounts;
  return function(){
    var pc = globalStore[ddname];  // get current sufficient stats
    var val = sample(discreteERP, [pc]);  // sample from predictive. (doesn't need to be normalized.)
    globalStore[ddname] = addCount(pc, val); // update sufficient stats
    return val;
  };
};

var append = function(a,b) {
  return a.concat(b);
};

var map = function(ar,fn) {
  return ar.length==0 ? [] : append([fn(ar[0])], map(ar.slice(1), fn));
};

var filter = function(ar,fn) {
  return ar.length==0 ? [] : append(fn(ar[0])?[ar[0]]:[], filter(ar.slice(1),fn));
};

var find = function(ar,fn) {
  return ar.length==0 ? undefined : (fn(ar[0]) ? ar[0] : find(ar.slice(1),fn));
};

var repeat = function(n, fn){
  return n == 0 ? [] : append(repeat(n-1, fn), [fn()]);
}

var push = function(xs, x){
  return xs.concat([x]);
}

var last = function(xs){
  return xs[xs.length - 1];
}
