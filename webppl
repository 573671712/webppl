#!/usr/bin/env node --stack-size=65500

var fs = require('fs');
var webppl = require('./src/main');
var parseArgs = require('minimist');
var path = require('path');
var git = require('git-rev-2');

function isErp(x){
  return (x && (x.score != undefined) && (x.sample != undefined));
}

function isErpWithSupport(x){
  return (isErp(x) && (x.support != undefined));
}

function printWebPPLValue(x){
  if (isErpWithSupport(x)){
    console.log('ERP:');
    var erpValues = x.support([]);
    erpValues.forEach(
      function(value){
        console.log('    ' + value + ': ' + Math.exp(x.score([], value)));
      });
  } else {
    console.log(x);
  }
}

var getModuleName = function(req){
  if (req.indexOf("/") != -1) {
    xs = req.split("/");
    return xs[xs.length-1];
  } else {
    return req;
  }
}

var getModulePath = function(req){
  if (req.indexOf("/") != -1){
    try {
      return require.resolve(path.join(process.cwd(), req));
    } catch (e) {
      return require.resolve(req);      
    }
  } else {
    return req;
  }
}

function run(code, requires, verbose){
  requires.forEach(function(req){
    global[req.name] = require(req.path);
  })
  webppl_eval(
    function(s, x){
      console.log("\n* Program return value:\n");
      printWebPPLValue(x);
    },
    code,
    verbose)
}

function compile(code, requires, verbose, outputFile){
  requires.push({
    name: 'webppl',
    path: require.resolve('./src/main')
  });
  // Build Javascript code
  var compiledCode = '';
  requires.forEach(function(req){
    compiledCode += "var " + req.name + " = require('" + req.path + "');\n";
  });
  compiledCode += ("var _trampoline;\n" +
                   isErp.toString() + '\n' +
                   isErpWithSupport.toString() + '\n' +
                   printWebPPLValue.toString() + '\n' +
                   "var topK = function(s, x){ " + 
                   " _trampoline = null; " +
                   " console.log('\\n* Program return value:\\n');" +
                   " printWebPPLValue(x); };\n");
  compiledCode += webppl.compile(code, verbose);
  // Write Javascript code to file  
  fs.writeFile(
    outputFile,
    compiledCode,
    function(err) {
      if (err) {
        console.log(err);
      } else {
        console.log("Wrote webppl code to", outputFile);
      }
    });  
}

function main(){

  var argv = parseArgs(process.argv.slice(2));

  // Print version if requested
  if (argv.version){
    git.branch(
      __dirname,
      function(err, branch){
        __dirname,
        git.short(
          function(err, short){
            console.log(branch, short, __dirname);
          });
        }
    );
    return;
  };

  // Return if no file argument given
  if (argv._[0] === undefined){
    console.log('No file argument given! Run webppl as follows:');
    console.log('webppl file.wppl [--compile] [--out file.js] [--require file2.js]');
    return;
  }

  // Load webppl code
  var programFile = argv._[0];
  console.log('Processing', programFile);
  var code = fs.readFileSync(programFile);

  var requires = (argv.require ? ((argv.require instanceof Array) ? argv.require : 
                                  [argv.require]) : []);

  for (var i=0; i<requires.length; i++){
    var req = requires[i];
    requires[i] = {
      name: getModuleName(req),
      path: getModulePath(req)
    }
  }
  var processCode = argv.compile ? compile : run;
  var outputFile = argv.out ? argv.out : "tmp.js";

  processCode(code, requires, argv.verbose, outputFile);
}

main();
